<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-10-15T16:44:05-07:00</updated><id>/</id><title>Running Jack</title><subtitle>Never Too Late.</subtitle><entry><title>Using External APIs in Rails</title><link href="/Using-External-API-in-Ruby-on-Rails/" rel="alternate" type="text/html" title="Using External APIs in Rails" /><published>2017-10-15T00:00:00-07:00</published><updated>2017-10-15T00:00:00-07:00</updated><id>/Using External API in Ruby on Rails</id><content type="html" xml:base="/Using-External-API-in-Ruby-on-Rails/">&lt;p&gt;Audience1st uses &lt;a href=&quot;https://github.com/laserlemon/figaro&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;figaro&lt;/code&gt;&lt;/a&gt; to manage secrets. As mentioned in the &lt;a href=&quot;http://jackwan.win/Get-Started-with-Legacy-Project/&quot;&gt;Get Started with Legacy Project&lt;/a&gt;. And it uses &lt;a href=&quot;https://stripe.com/docs/api/ruby#intro&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stripe&lt;/code&gt;&lt;/a&gt; to deal with online payments.&lt;/p&gt;

&lt;h2 id=&quot;figarohttpsgithubcomlaserlemonfigaro&quot;&gt;&lt;a href=&quot;https://github.com/laserlemon/figaro&quot;&gt;Figaro&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;figaro&lt;/code&gt; will generate a git-ignored file &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.yml&lt;/code&gt; for secrets management.
In &lt;code class=&quot;highlighter-rouge&quot;&gt;Audience1st&lt;/code&gt;, it looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;session_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;stripe_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(publishable)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;stripe_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# include at most one of the following two lines - not both:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;email_integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MailChimp&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if you use MailChimp, include this line verbatim, else omit&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;email_integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConstantContact&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# if you use CC, include this line verbatime, else omit&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# if you included one of the two Email Integration choices:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;mailchimp_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;optional:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mailchimp,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;omit&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;entry&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;publishable&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV['stripe_key']&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Figaro.env.stripe_key&lt;/code&gt;, which totally depends on personal preference, to access the secrets you set in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.yml&lt;/code&gt;. Using a tool to manage secrets is a very good practice in terms of separating dependencies.&lt;/p&gt;

&lt;h2 id=&quot;stripehttpsstripecomdocsapirubyintro&quot;&gt;&lt;a href=&quot;https://stripe.com/docs/api/ruby#intro&quot;&gt;Stripe&lt;/a&gt;&lt;/h2&gt;
&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;You should &lt;strong&gt;never include your API keys in plaintext&lt;/strong&gt; as is showed in the API documentations of &lt;code class=&quot;highlighter-rouge&quot;&gt;Stripe&lt;/code&gt;, because they do this for readability.&lt;/em&gt;  &lt;strong&gt;You can get your api_key for free by creating an account at stripe.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s a typical charge action using &lt;code class=&quot;highlighter-rouge&quot;&gt;stripe&lt;/code&gt;, it will return a &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stripe&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Stripe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;api_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wublubdabuda&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Stripe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Charge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 2000 means $20.00, the unit is *cent*&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;usd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tok_mastercard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# obtained with Stripe.js&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Charge for jackwan@example.com&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:idempotency_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;whateverulike&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;NOTE: &lt;strong&gt;Credit card information is sent directly to Stripe, ensuring sensitive data never hits your servers, all you get is a token.&lt;/strong&gt;&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;NOTE FURTHER: &lt;strong&gt;Genuine card information cannot be used in test mode.&lt;/strong&gt; Instead, use any of the following test card numbers, a valid expiration date in the future, and any &lt;strong&gt;random&lt;/strong&gt; CVC number, to create a successful payment.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Number&lt;/th&gt;
      &lt;th&gt;Brand&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4242&lt;span&gt;&lt;/span&gt;4242&lt;span&gt;&lt;/span&gt;4242&lt;span&gt;&lt;/span&gt;4242&lt;/td&gt;
      &lt;td&gt;Visa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4000&lt;span&gt;&lt;/span&gt;0566&lt;span&gt;&lt;/span&gt;5566&lt;span&gt;&lt;/span&gt;5556&lt;/td&gt;
      &lt;td&gt;Visa (debit)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5555&lt;span&gt;&lt;/span&gt;5555&lt;span&gt;&lt;/span&gt;5555&lt;span&gt;&lt;/span&gt;4444&lt;/td&gt;
      &lt;td&gt;Mastercard&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5200&lt;span&gt;&lt;/span&gt;8282&lt;span&gt;&lt;/span&gt;8282&lt;span&gt;&lt;/span&gt;8210&lt;/td&gt;
      &lt;td&gt;Mastercard (debit)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5105&lt;span&gt;&lt;/span&gt;1051&lt;span&gt;&lt;/span&gt;0510&lt;span&gt;&lt;/span&gt;5100&lt;/td&gt;
      &lt;td&gt;Mastercard (prepaid)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3782&lt;span&gt;&lt;/span&gt;822463&lt;span&gt;&lt;/span&gt;10005&lt;/td&gt;
      &lt;td&gt;American Express&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3714&lt;span&gt;&lt;/span&gt;496353&lt;span&gt;&lt;/span&gt;98431&lt;/td&gt;
      &lt;td&gt;American Express&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6011&lt;span&gt;&lt;/span&gt;1111&lt;span&gt;&lt;/span&gt;1111&lt;span&gt;&lt;/span&gt;1117&lt;/td&gt;
      &lt;td&gt;Discover&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6011&lt;span&gt;&lt;/span&gt;0009&lt;span&gt;&lt;/span&gt;9013&lt;span&gt;&lt;/span&gt;9424&lt;/td&gt;
      &lt;td&gt;Discover&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3056&lt;span&gt;&lt;/span&gt;9309&lt;span&gt;&lt;/span&gt;0259&lt;span&gt;&lt;/span&gt;04&lt;/td&gt;
      &lt;td&gt;Diners Club&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3852&lt;span&gt;&lt;/span&gt;0000&lt;span&gt;&lt;/span&gt;0232&lt;span&gt;&lt;/span&gt;37&lt;/td&gt;
      &lt;td&gt;Diners Club&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3530&lt;span&gt;&lt;/span&gt;1113&lt;span&gt;&lt;/span&gt;3330&lt;span&gt;&lt;/span&gt;0000&lt;/td&gt;
      &lt;td&gt;JCB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To better understand &lt;code class=&quot;highlighter-rouge&quot;&gt;Stripe&lt;/code&gt;’s working mechanism, check this out:&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/Audience1st/Stripe.jpeg&quot;&gt;&lt;img src=&quot;/assets/img/projects/Audience1st/Stripe.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;- From Anonymous&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="Tools" /><category term="Ruby on Rails" /><category term="Audience1st" /><summary>Explain basic logic of online payment using the example of Figaro and Stripe...</summary></entry><entry><title>Ruby on Rails Framework</title><link href="/Ruby-On-Rails-Framework/" rel="alternate" type="text/html" title="Ruby on Rails Framework" /><published>2017-10-14T00:00:00-07:00</published><updated>2017-10-14T00:00:00-07:00</updated><id>/Ruby On Rails Framework</id><content type="html" xml:base="/Ruby-On-Rails-Framework/">&lt;p&gt;Today I browsed the source code of “Audience1st”, during which I found many interesting things. I write them down just for future review.&lt;/p&gt;

&lt;h2 id=&quot;routes&quot;&gt;Routes&lt;/h2&gt;
&lt;p&gt;Speaking of routes in Ruby on Rails, we have to go into the file &lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt; to see what’s going on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s good practice to separate different user groups in RESTful routes&lt;/strong&gt;. Most commonly, you might group a number of administrative controllers under an Admin:: namespace. You would place these controllers under the app/controllers/admin directory, and you can group them together in your router:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a number of routes for each of the articles and comments controller. For Admin::ArticlesController, Rails will create the following 7 routes by default:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP Verb&lt;/th&gt;
      &lt;th&gt;Path&lt;/th&gt;
      &lt;th&gt;Controller#Action&lt;/th&gt;
      &lt;th&gt;Named Helper&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/admin/articles&lt;/td&gt;
      &lt;td&gt;admin/articles#index&lt;/td&gt;
      &lt;td&gt;admin_articles_path&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/admin/articles/new&lt;/td&gt;
      &lt;td&gt;admin/articles#new&lt;/td&gt;
      &lt;td&gt;new_admin_article_path&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;/admin/articles&lt;/td&gt;
      &lt;td&gt;admin/articles#create&lt;/td&gt;
      &lt;td&gt;admin_articles_path&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/admin/articles/:id&lt;/td&gt;
      &lt;td&gt;admin/articles#show&lt;/td&gt;
      &lt;td&gt;admin_article_path(:id)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/admin/articles/:id/edit&lt;/td&gt;
      &lt;td&gt;admin/articles#edit&lt;/td&gt;
      &lt;td&gt;edit_admin_article_path(:id)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATCH/PUT&lt;/td&gt;
      &lt;td&gt;/admin/articles/:id&lt;/td&gt;
      &lt;td&gt;admin/articles#update&lt;/td&gt;
      &lt;td&gt;admin_article_path(:id)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;/admin/articles/:id&lt;/td&gt;
      &lt;td&gt;admin/articles#destroy&lt;/td&gt;
      &lt;td&gt;admin_article_path(:id)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As for &lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes&lt;/code&gt;, in Audience1st, we have:&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Notice the comment sections&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# :format =&amp;gt; false means that this app only returns 'html'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'customers#show'&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bulk_downloads&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:account_codes&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# :expect indicates that rails should not include the routes in the list&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:except&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 'member do' enables Rails to create a path 'imports/1/download_invalid'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:download_invalid&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 'collection do' enables Rails to create a path 'imports/help', contrast with 'member'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:help&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;controller&quot;&gt;Controller&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Actions requiring no login, customer login, and staff login respectively&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ACTIONS_WITHOUT_LOGIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(new user_create forgot_password)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CUSTOMER_ACTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(show edit update change_password_for change_secret_question)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ADMIN_ACTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;sx&quot;&gt;%w(create search merge finalize_merge index list_duplicate auto_complete_for_customer_full_name)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# All these filters redirect to login if trying to trigger an action without correct preconditions.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:is_logged_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:except&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ACTIONS_WITHOUT_LOGIN&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:is_myself_or_staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:only&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CUSTOMER_ACTIONS&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:is_staff_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:only&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ADMIN_ACTIONS&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# This will skip the before filter - 'verify_authenticity_token' for the action 'auto_complete_for_customer_full_name'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;skip_before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(auto_complete_for_customer_full_name)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;NOTE: &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationController&lt;/code&gt; is practically the class &lt;strong&gt;which every other controller in you application is going to inherit from&lt;/strong&gt; (although this is not mandatory in any mean). In this case, :is_logged_in is an instance method in &lt;code class=&quot;highlighter-rouge&quot;&gt;application_controller.rb&lt;/code&gt;.&lt;/p&gt;</content><category term="Ruby on Rials" /><summary>For future review...</summary></entry><entry><title>Get Started with Legacy Projects</title><link href="/Get-Started-with-Legacy-Project/" rel="alternate" type="text/html" title="Get Started with Legacy Projects" /><published>2017-10-13T00:00:00-07:00</published><updated>2017-10-13T00:00:00-07:00</updated><id>/Get Started with Legacy Project</id><content type="html" xml:base="/Get-Started-with-Legacy-Project/">&lt;h1 id=&quot;audience1st&quot;&gt;Audience1st&lt;/h1&gt;
&lt;p&gt;I am working on Ruby on Rails this semester, which is very suitable for Agile/XP. &lt;a href=&quot;https://github.com/WanNJ/audience1st&quot;&gt;Audience1st&lt;/a&gt; is an open source project designated to offer ticketing system to local theaters, in which case they will be able to have their own customer resources in stead of just a list of names provided by the third party ticketing system. Our professor, &lt;a href=&quot;http://www.armandofox.com/&quot;&gt;Armando Fox&lt;/a&gt;, is an excellent versatile EECS educator, who is also the creator of this repo for his love in play and music. He did this not for money but for his interests in this area, so he only charge the local theaters the money for maintaining the website.&lt;/p&gt;

&lt;p&gt;Although the look of the website is not perfect, sometimes you may think ugly, but this is for that we have no professional front programmer in hand. But we are considering to make some improvements later.&lt;/p&gt;

&lt;h1 id=&quot;migration-of-the-project&quot;&gt;Migration of the project&lt;/h1&gt;
&lt;p&gt;The first thing we need to do for developing this app is to migrate it to our own development environment.&lt;/p&gt;

&lt;h3 id=&quot;config&quot;&gt;Config&lt;/h3&gt;
&lt;p&gt;We can hardly imagine writing a useful app without using external APIs, which require tokens or passwords. &lt;strong&gt;Checking these passwords or secrets in to public repos is a very bad practice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://12factor.net&quot;&gt;12-Factor App&lt;/a&gt; methodology, it emphasizes the importance to keep configurations in the environment to implement &lt;strong&gt;independency&lt;/strong&gt;(&lt;strong&gt;strict separation of config from code&lt;/strong&gt;). This is because “Config varies substantially across deploys, code does not.” It says:&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;A litmus test for whether an app has all config correctly factored out of the code is whether the codebase &lt;strong&gt;could be made open source at any moment&lt;/strong&gt;, without compromising any credentials.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Good practice is to ignore these config files in version control. In audience1st, &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-.gitignore&quot; data-lang=&quot;.gitignore&quot;&gt;coverage/               # Test coverage log folder
config/database.yml     # Database configuration file
db/*.sqlite3	        # Local database file
config/application.yml  # Secrets storage
log/                    # Log folder for development environment
.*                      # All system files

# Others
.bundle/
TAGS
brakeman.*
rerun.txt
public/stylesheets/venue
tmp/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Ruby, if you use &lt;code class=&quot;highlighter-rouge&quot;&gt;figaro&lt;/code&gt;, then you will store the secrets in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.yml&lt;/code&gt; and you will store database configurations in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt;. As you can see, these two files are ignored by &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;. Others are explained in the comments section.&lt;/p&gt;

&lt;p&gt;One typical &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.yml&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;session_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;stripe_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(publishable)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;stripe_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# include at most one of the following two lines - not both:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;email_integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MailChimp&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if you use MailChimp, include this line verbatim, else omit&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;email_integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConstantContact&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# if you use CC, include this line verbatime, else omit&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# if you included one of the two Email Integration choices:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;mailchimp_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;optional:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mailchimp,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;omit&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;entry&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;publishable&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One typical &lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqlite3&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db/test.sqlite3&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqlite3&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db/development.sqlite3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;setup-database&quot;&gt;Setup Database&lt;/h3&gt;
&lt;p&gt;Now we can directly run &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:setup&lt;/code&gt;, which runs &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;db:seed&lt;/code&gt; to create necessary seed data.&lt;/p&gt;

&lt;h3 id=&quot;to-be-continued&quot;&gt;To Be Continued…&lt;/h3&gt;</content><category term="Ruby on Rials" /><category term="Audience1st" /><summary>Notes made when configure Audience1st...</summary></entry><entry><title>Use LabVIEW to Construct State Machines</title><link href="/Use-LabVIEW-to-Construct-State-Machines/" rel="alternate" type="text/html" title="Use LabVIEW to Construct State Machines" /><published>2017-10-10T00:00:00-07:00</published><updated>2017-10-10T00:00:00-07:00</updated><id>/Use LabVIEW to Construct State Machines</id><content type="html" xml:base="/Use-LabVIEW-to-Construct-State-Machines/">&lt;h2 id=&quot;statecharts-module-of-labview&quot;&gt;Statecharts Module of LabVIEW&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Statecharts are useful in simplifying the design of applications that use &lt;strong&gt;complex decision-making algorithms&lt;/strong&gt;. By constructing a statechart, you can &lt;strong&gt;visualize the flow of a complex decision-making algorithm&lt;/strong&gt; and achieve a high-level view of an application. This view helps you improve the overall design of the application. &lt;br /&gt; - National Instruments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s some useful resources for reviewing this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ni.com/white-paper/7413/en/&quot;&gt;UML Terminologies in LabVIEW Statechart Module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zone.ni.com/reference/en-XX/help/372103D-01/lvschowto/sc_h_gs/&quot;&gt;Tutorial: Creating an Asynchronous Statechart&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;one-sample-provided-by-labview&quot;&gt;One Sample Provided by LabVIEW&lt;/h2&gt;
&lt;p&gt;I tried to download LabVIEW 2017 Education Version to get more familiar with this tool.
I created a demo project call &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple State Machine&lt;/code&gt;.
Here’s the project file structure and the overview:&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    
    &lt;a href=&quot;/assets/img/projects/LabVIEW/ProjectStructure.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/LabVIEW/ProjectStructure.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;a href=&quot;/assets/img/projects/LabVIEW/OverviewOfProject.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/LabVIEW/OverviewOfProject.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It is indeed a very simple project. What it does is simply pop up a dialog when you click a button and pop up another dialog when you click another button. Although it’s very trivial, it can be extended into very complicated model. The idea behind the notion is the thing that matter.&lt;/p&gt;

&lt;p&gt;Here are some main points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Each state in the diagram above corresponds to a subdiagram&lt;/strong&gt; of the Case structure in &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.vi&lt;/code&gt;. Each state:
    &lt;ul&gt;
      &lt;li&gt;Performs some action&lt;/li&gt;
      &lt;li&gt;Tells the state machine what the next state is by passing an instruction to a shift register on the While Loop.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Each state has access to a cluster of data&lt;/strong&gt;. The data types in this cluster are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;Data.ctl&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The valid states are listed in &lt;code class=&quot;highlighter-rouge&quot;&gt;State.ctl&lt;/code&gt;&lt;/strong&gt;, which is a typedef. Using a typedef for state transitions restricts the transitions you can use, reducing the chances that the state machine gets into an unrecognized state.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Only the Stop state can stop the application&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mechanisms&quot;&gt;Mechanisms&lt;/h2&gt;
&lt;p&gt;A typical LabVIEW project has a &lt;code class=&quot;highlighter-rouge&quot;&gt;front panel&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;block diagram&lt;/code&gt;. These two things are connected implicitly and internally. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Round LED&lt;/code&gt; in the front panel, you will automatically get a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; value in the corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;block diagram&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If you create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Waveform Chart&lt;/code&gt; in the front panel, you will get a &lt;code class=&quot;highlighter-rouge&quot;&gt;Waveform Chart&lt;/code&gt;.(The name appears same by chance, not necessarily.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all, &lt;strong&gt;making the flow of the program as visible as much is the main philosophy of LabVIEW&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;critical-thinking&quot;&gt;Critical Thinking&lt;/h2&gt;
&lt;p&gt;LabVIEW is a wonderful visible programming tool, but it sometimes can be very confusing for programmers used to C. For me, it usually appears to be not that intuitive but confusing or even annoying:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Where one specific block is and what it exactly does can distract your attention very easily. Sometimes you may forgot where the structure is, and &lt;strong&gt;you will have to go through the hierarchical structure of the control menu&lt;/strong&gt;. This operations cost time, along with the expanding of the menu having delays. It waste lots of time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can’t make good use of your keyboard for all kinds of operations in LabVIEW can only be done by using mouse, which is not very friendly to sophisticated programmer. As far as I am concerned, &lt;strong&gt;it heavily decreases the productivities of programmers&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The shapes of different structures can be very similar sometimes (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Case Structure&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;While&lt;/code&gt;). &lt;strong&gt;You will probably be misled by this subtle distinctions&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When your logic becomes more and more complex, your &lt;code class=&quot;highlighter-rouge&quot;&gt;block diagram&lt;/code&gt; will be filled with more and more wires crossing each other. If you want to delete or refactor your code in this case, you will fall into hell - you have to fix those broken parts and clean up those messy wires. In other words, for its limits in embracing changes, I think &lt;strong&gt;LabVIEW is not a good choice for big project&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Its &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt; are placed together with the main logic of the program. Their color is bright yellow, which can also distract your attention easily. And it often appears to be a mess in complex block diagrams.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In summary, we can use LabVIEW to build small to medium project but not big project. But I don’t think Agile/XP methodologies can apply to projects based on LabVIEW, which greatly limits the use of LabVIEW.&lt;/p&gt;</content><category term="Embedded Systems" /><category term="LabVIEW" /><summary>A brief summary of how to use labVIEW state chart to construct state machines...</summary></entry><entry><title>Agile/XP Tools</title><link href="/Agile-XP-Tools/" rel="alternate" type="text/html" title="Agile/XP Tools" /><published>2017-09-21T00:00:00-07:00</published><updated>2017-09-21T00:00:00-07:00</updated><id>/Agile:XP Tools</id><content type="html" xml:base="/Agile-XP-Tools/">&lt;h2 id=&quot;software-engineering&quot;&gt;Software Engineering&lt;/h2&gt;
&lt;p&gt;Software Engineering is a relatively new term which was first used as a title for the World’s first conference on software engineering, sponsored and facilitated by NATO in 1968. It was designated to solve the troublesome problems in building softwares. The concept is to apply engineering disciplines to software design and construction. It aims to make software product predictable in terms of cost, quality and time. Brooks mentioned “No silver bullet” in his article &lt;em&gt;The Mythical Man-Month&lt;/em&gt; in 1986, which is to say that there’s no specific solutions for the uncertainties, inconsistencies and complexities. But are there any ways to improve this process? Of course.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;The following contents &lt;strong&gt;draw heavily from Armando Fox’s slides&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;p--d&quot;&gt;P &amp;amp; D&lt;/h2&gt;
&lt;p&gt;Plan &amp;amp; Document is one of the methods in the early stage of SE. It emphasizes the importance of plan and document in advance. Here are some key points:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make plan before doing any coding.&lt;/li&gt;
  &lt;li&gt;Write detailed documents (e.g.: requirement documents and interface documents) of all phases of the plan you made.&lt;/li&gt;
  &lt;li&gt;Members should strictly follow the documents decided in earlier phases.&lt;/li&gt;
  &lt;li&gt;Any changes in plan or design should be reflected in documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;waterfall-model-1970&quot;&gt;Waterfall Model, 1970&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Requirements Analysis and Specification&lt;/li&gt;
  &lt;li&gt;Architecture design.&lt;/li&gt;
  &lt;li&gt;Implementation and Integration&lt;/li&gt;
  &lt;li&gt;Verification.&lt;/li&gt;
  &lt;li&gt;Maintenance.
It believes that “Earlier catch bug, cheaper it is”. But it requires extensive documentations, which may be too heavy and even too “clumsy” sometimes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;spiral-model-1986&quot;&gt;Spiral Model, 1986&lt;/h3&gt;
&lt;p&gt;As far as I am concerned, spiral model is the former prototype of Agile. It emphasizes the whole process of building a healthy software consists of multiple iterations, in which every iteration contains almost every phase that waterfall model requires. Here is the illustration:&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/SpiralModel.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/SpiralModel.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;- Spiral Model&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;rational-unified-process-2003&quot;&gt;Rational Unified Process, 2003&lt;/h3&gt;
&lt;p&gt;It is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Rational&lt;/code&gt; for it is first developed by a company called Rational Software.&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/RUP.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/RUP.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;- From JOSE MANUEL SAMPAYO&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;The RUP framework is two dimensional, with axes indicating time and content. The time dimension is organized by phases, iterations, and milestones. The content dimension consists of software disciplines containing the workflows, &lt;strong&gt;roles&lt;/strong&gt;, &lt;strong&gt;activities&lt;/strong&gt;, and &lt;strong&gt;artifacts&lt;/strong&gt; as they apply to that discipline.
-IBM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;agile-manifesto-2001&quot;&gt;Agile Manifesto, 2001&lt;/h2&gt;
&lt;p&gt;“We are uncovering better ways of developing SW by doing it and helping others do it. Through this work we have come to value:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Individuals and interactions over processes &amp;amp; tools&lt;/li&gt;
  &lt;li&gt;Working software over comprehensive documentation&lt;/li&gt;
  &lt;li&gt;Customer collaboration over contract negotiation&lt;/li&gt;
  &lt;li&gt;Responding to change over following a plan
That is, while there is value in the items on the right, we value the items on the left more.”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extreme-programming-1999---2003&quot;&gt;Extreme Programming, 1999 - 2003&lt;/h2&gt;
&lt;p&gt;If one thing is good, then do it whenever you can and make best use of it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If short iterations are good, make them as short as possible (weeks vs. years)&lt;/li&gt;
  &lt;li&gt;If simplicity is good, always do the simplest thing that could possibly work&lt;/li&gt;
  &lt;li&gt;If testing is good, test all the time. Write the test code before you write the code to test.&lt;/li&gt;
  &lt;li&gt;If code reviews are good, review code continuously, by programming in pairs, taking turns looking over each others’ shoulders.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/ExtremeProgramming.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/ExtremeProgramming.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;- Agile Process&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;tools-for-agilexp-in-ruby-on-rails&quot;&gt;Tools for Agile/XP in Ruby on Rails&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; to perform version control.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pivotaltracker.com/&quot;&gt;Pivotal Tracker&lt;/a&gt; for project management. We can use points and velocity to track our current progress and to predict our future progress.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://heroku.com/&quot;&gt;Heroku&lt;/a&gt; for deploying our app. (This is only for those who don’t have the access to a personal server. But it’s indeed a perfect way to check your code structure and independency.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; for automatically running tests, which is called &lt;strong&gt;continuous integration(CI)&lt;/strong&gt; by some people.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://coveralls.io/&quot;&gt;Coveralls&lt;/a&gt; for detailed test coverage measurements.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codeclimate.com/&quot;&gt;CodeClimate&lt;/a&gt; for reporting on the quality and robustness of our source code. (Static Analysis.)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Agile" /><category term="SE" /><summary>A Introduction to Agile program Tools</summary></entry><entry><title>Java 8 Lambda Expression</title><link href="/Java8Learning/" rel="alternate" type="text/html" title="Java 8 Lambda Expression" /><published>2017-03-09T00:00:00-08:00</published><updated>2017-03-09T00:00:00-08:00</updated><id>/Java8Learning</id><content type="html" xml:base="/Java8Learning/">&lt;p&gt;最近又在写大作业，感觉自己根本不会Java，于是赶紧恶补Java 8，以免被组长还有各路大神嫌弃。&lt;/p&gt;

&lt;h3 id=&quot;lambda-expression&quot;&gt;Lambda Expression&lt;/h3&gt;
&lt;p class=&quot;notice&quot;&gt;A function (or a subroutine) defined, and possibly called, without being bound to an identifier.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;简单点说就是：一个不用被绑定到一个标识符上，并且可能被调用的函数。也可以理解为是一种快速创建SAM(SingleAbstract Method)接口(即只有一个方法的接口，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;EventListener&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.function&lt;/code&gt;等)的方法。&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;我的理解是Lambda表达式不是一个方法，它表达的是一个函数，所以最大的用途也就是简化那些需要函数作为参数的语句(函数接口) 这也就是为什么&lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda Expression&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.function&lt;/code&gt;结合这么紧的原因&lt;/p&gt;

&lt;p&gt;下面是基本格式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statment1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statment2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//.............&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statmentM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;参数类型可省略 —— 绝大多数情况，编译器都可以从上下文环境中推断出lambda表达式的参数类型&lt;/li&gt;
  &lt;li&gt;当lambda表达式的参数个数只有一个，可以省略小括号&lt;/li&gt;
  &lt;li&gt;当lambda表达式只包含一条语句时，可以省略大括号、return和语句结尾处的分号&lt;/li&gt;
  &lt;li&gt;使用Method Reference&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下是各种例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//添加监听器&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;//等价如下 &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//创建新线程&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//等价如下&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  
&lt;span class=&quot;c1&quot;&gt;//又如此，将字符串按长度排序&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;peng&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zhao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section&quot;&gt;再次理解&lt;/h2&gt;

&lt;p&gt;需要注意的是，函数式接口的名称并不是lambda表达式的一部分。那么问题来了，对于给定的lambda表达式，它的类型是什么？答案是：它的类型是由其上下文推导而来。例如，下面代码中的lambda表达式类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionListener&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dazzle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这就意味着同样的lambda表达式在不同上下文里可以拥有不同的类型：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;第一个lambda表达式&lt;code class=&quot;highlighter-rouge&quot;&gt;() -&amp;gt; &quot;done&quot;&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Callable的&lt;/code&gt;实例，而第二个lambda表达式则是&lt;code class=&quot;highlighter-rouge&quot;&gt;PrivilegedAction&lt;/code&gt;的实例。&lt;/p&gt;

&lt;p&gt;编译器负责推导lambda表达式的类型。它利用lambda表达式所在上下文所期待的类型进行推导，这个被期待的类型被称为目标类型。lambda表达式只能出现在目标类型为函数式接口的上下文中。&lt;/p&gt;

&lt;p&gt;当然，lambda表达式对目标类型也是有要求的。编译器会检查lambda表达式的类型和目标类型的方法签名（method signature）是否一致。当且仅当下面所有条件均满足时，lambda表达式才可以被赋给目标类型T：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;是一个函数式接口&lt;/li&gt;
  &lt;li&gt;lambda表达式的参数和T的方法参数在数量和类型上一一对应&lt;/li&gt;
  &lt;li&gt;lambda表达式的返回值和T的方法返回值相兼容（&lt;code class=&quot;highlighter-rouge&quot;&gt;Compatible&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;lambda表达式内所抛出的异常和T的方法throws类型相兼容&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于目标类型（函数式接口）已经“知道”lambda表达式的形式参数（Formal parameter）类型，所以我们没有必要把已知类型再重复一遍。也就是说，lambda表达式的参数类型可以从目标类型中得出：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在上面的例子里，编译器可以推导出s1和s2的类型是String。此外，当lambda的参数只有一个而且它的类型可以被推导得知时，该参数列表外面的括号可以被省略：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dazzle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这些改进进一步展示了我们的设计目标：“不要把高度问题转化成宽度问题。”我们希望语法元素能够尽可能的少，以便代码的读者能够直达lambda表达式的核心部分。&lt;/p&gt;

&lt;p&gt;lambda表达式并不是第一个拥有上下文相关类型的Java表达式：泛型方法调用和“菱形”构造器调用也通过目标类型来进行类型推导：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><category term="coding" /><category term="Java" /><summary>Java 8 Learning Notes</summary></entry><entry><title>Java 8 Function</title><link href="/Java8-Function/" rel="alternate" type="text/html" title="Java 8 Function" /><published>2017-03-08T00:00:00-08:00</published><updated>2017-03-08T00:00:00-08:00</updated><id>/Java8 Function</id><content type="html" xml:base="/Java8-Function/">&lt;h3 id=&quot;javautilfunction&quot;&gt;java.util.function&lt;/h3&gt;

&lt;p&gt;在Java8中你会发现&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.function&lt;/code&gt;包下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Predicate&lt;/code&gt;和其他函数式接口广泛用在支持lambda表达式的API中。这些接口有一个抽象方法，会被lambda表达式的定义所覆盖。&lt;/p&gt;

&lt;p&gt;这里简单介绍一下&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;接口：&lt;/p&gt;

&lt;p&gt;接口的主要方法：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R apply(T t)&lt;/code&gt;
将Function对象应用到输入的参数上，然后返回计算结果。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default ‹V› Function‹T,V›&lt;/code&gt; 
将两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;整合，并返回一个能够执行两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;对象功能的&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;对象。&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;如果你想把接受一些输入参数并将对输入参数处理过后的结果返回的功能封装到一个方法内，&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;接口是一个不错的选择。&lt;/p&gt;

&lt;p&gt;示例如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunctionDemo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//API which accepts an implementation of Function interface&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Function接口实现作为参数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueToBeOperated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueToBeOperated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Do some operations using the new value.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下面是调用上述方法的例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;somestring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><category term="coding" /><category term="Java" /><summary>Java 8 Learning Notes</summary></entry><entry><title>The use of .gitignore</title><link href="/gitignore%E7%94%A8%E6%B3%95/" rel="alternate" type="text/html" title="The use of .gitignore" /><published>2016-10-28T00:00:00-07:00</published><updated>2016-10-28T00:00:00-07:00</updated><id>/gitignore用法</id><content type="html" xml:base="/gitignore%E7%94%A8%E6%B3%95/">&lt;h1 id=&quot;section&quot;&gt;大作业的痛苦&lt;/h1&gt;
&lt;p&gt;最近在写大作业，用Github做版本控制，小组里就我一个人用的Mac，而且系统老是自动生成&lt;code class=&quot;highlighter-rouge&quot;&gt;.DS_Store&lt;/code&gt;文件，在网上查了怎么取消掉的命令行，输入&lt;b&gt;Terminal&lt;/b&gt;，无果。更痛苦的是，每次一修改源代码，就会有一堆&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;文件的changes，随之而来的，还有一堆conflicts，简直迷醉啊有木有。于是乎，我找到了&lt;b&gt;Solution&lt;/b&gt;。&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件) 建立方法&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;touch .gitignore
vim .gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个文件忽略的规则：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;*.a       # 忽略所有 .a 结尾的文件
!lib.a    # 但 lib.a 除外
/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/    # 忽略 build/ 目录下的所有文件&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;p&gt;但是我添加后，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git rm -r --cached .
git add .
git commit -m 'update .gitignore'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;之后，就再也不用忍受一堆.class文件啦！&lt;/p&gt;</content><category term="coding" /><summary>用.gitignore忽略文件</summary></entry><entry><title>Hello Blog</title><link href="/HelloBlog/" rel="alternate" type="text/html" title="Hello Blog" /><published>2016-10-02T00:00:00-07:00</published><updated>2016-10-02T00:00:00-07:00</updated><id>/HelloBlog</id><content type="html" xml:base="/HelloBlog/">&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/1.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Thanks to this girl - FYQ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;section&quot;&gt;初衷&lt;/h1&gt;
&lt;p&gt;一开始想有个自己的博客，（准确来说不是自己，而是我们俩，哈哈哈哈）是在今年暑假（就是因为上面这个人），结果感觉做个动态网站要学的东西太多，所以就先搁置。&lt;/p&gt;

&lt;p&gt;开心的是，开学小百合的灿海学长给介绍了Jekyll，然后我回去捣鼓了一天，终于把Ruby什么的一堆环境配置好了。就开始改写代码，加自己的功能，然后又过了几天，搞出来了只属于我和上面这个人的网站，然后绑定CNAME(之前早就买好了域名，10年的)，放到GitHub Pages上托管，&lt;b&gt;Everything is done.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;所以这是我搞的第二个了，就是想给自己写点东西的动力，给点自己记录生活的激情。别每天看着身边的人一个个的都在成长，都好厉害的样子就盲目去追逐。就像长跑一样，如果你跑步时总想着追着前面那个人，那你自己的节奏就会乱，到了后程就会感觉力不从心。但行好事，莫问前程。河狭水急，人急计生。做自己想做之事，这总不是错的。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;行动&lt;/h1&gt;
&lt;p&gt;如果你们也想自己做一个，其实也挺简单，不过没有&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;官网上说的那么简单，原话是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Get up and running &lt;i&gt;in seconds&lt;/i&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面简单介绍一下这几秒钟内要做的事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置Jekyll Environment，安装Ruby，什么一大堆，如果是Mac，装个Homebrew（简直神器），一个个安吧，详情见Jekyll官网，祝好运。&lt;/li&gt;
  &lt;li&gt;去Github上找自己喜欢的主题，找的时候一定要注意跨设备性，如果这玩意要自己写的话就很麻烦，不如让别人帮你写好，然后Fork到自己的Github上，到现在为止没用过Github的同学就…&lt;/li&gt;
  &lt;li&gt;简单配置网站的话，直接修改Fork下来的文件夹中的&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;再把 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 文件夹中的样本删掉，用Markdown写出你自己的.&lt;/li&gt;
  &lt;li&gt;再改改这的代码，改改那的代码，加特技，最后如果想把这个网站弄的彻底的面目全非，请再在主页加上你自己的自拍。&lt;/li&gt;
  &lt;li&gt;在Github上把这个文件夹拷贝到&lt;code class=&quot;highlighter-rouge&quot;&gt;YourUserName.github.io&lt;/code&gt;里，YourUserName就是Your User Name了，一定要完全一样，不然会失败。&lt;/li&gt;
  &lt;li&gt;(optional)在GitHub的Settings里绑定自己的域名，如果你不想每次看自己的网站都要输入&lt;i&gt;Balabalabala.github.io&lt;/i&gt;这么一长串的话。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all. 完全不懂编程的同学可能比较难以完成，或者完成了之后完全没办法修改，只能照搬。这个时候，只需要你完成下面的四个步骤&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学！&lt;/li&gt;
  &lt;li&gt;习！&lt;/li&gt;
  &lt;li&gt;编！&lt;/li&gt;
  &lt;li&gt;程！&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-2&quot;&gt;成果&lt;/h1&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/2.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Screenshots of My Page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-3&quot;&gt;尾声&lt;/h1&gt;
&lt;p&gt;最后如果有人做了，或者已经有了，可以通过各种途径告诉我，以后可以多多交流，刚好我也想加个&lt;code class=&quot;highlighter-rouge&quot;&gt;FRIENDS&lt;/code&gt;模块，里面列出友情链接，哈哈哈。&lt;/p&gt;</content><category term="blog" /><category term="about" /><category term="life" /><summary>Hello, My coming 2017. Hello, My life.</summary></entry><entry><title>Hello World</title><link href="/HelloWorld/" rel="alternate" type="text/html" title="Hello World" /><published>2016-10-02T00:00:00-07:00</published><updated>2016-10-02T00:00:00-07:00</updated><id>/HelloWorld</id><content type="html" xml:base="/HelloWorld/">&lt;h1 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h1&gt;

&lt;p&gt;网站基本配置完成，还有要搞的就是跨设备支持（那个返回顶端的小箭头在移动设备上显示不出来）和Disqus，话说iPhone的屏是真长啊。&lt;/p&gt;

&lt;p&gt;原本想加个背景音乐，但在上个网站的配置过程中发现，只有Chrome支持自动播放，索性就不加了。&lt;/p&gt;

&lt;p&gt;关于更多这个玩意是怎么弄出来的，请移步Projects.&lt;/p&gt;

&lt;p&gt;把以前的文章拉出来凑数，以后&lt;b&gt;不定期&lt;/b&gt;应该会更新…&lt;/p&gt;

&lt;p&gt;就这样吧，最后放个图&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/posts/4_0.JPG&quot;&gt;&lt;img src=&quot;/assets/img/posts/4_0.JPG&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Eh...&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="life" /><summary>就这样吧</summary></entry></feed>
