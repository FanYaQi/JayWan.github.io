<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-10-14T01:11:23-07:00</updated><id>/</id><title>Running Jack</title><subtitle>Jack Quick Running. Never Too Late.</subtitle><entry><title>Legacy Projects in Ruby on Rails</title><link href="/Ruby-on-Rails-Get-Started-with-Legacy-Project/" rel="alternate" type="text/html" title="Legacy Projects in Ruby on Rails" /><published>2017-10-13T00:00:00-07:00</published><updated>2017-10-13T00:00:00-07:00</updated><id>/Ruby on Rails Get Started with Legacy Project</id><content type="html" xml:base="/Ruby-on-Rails-Get-Started-with-Legacy-Project/">&lt;h1 id=&quot;audience1st&quot;&gt;Audience1st&lt;/h1&gt;
&lt;p&gt;I am working on Ruby on Rails this semester, which is very suitable for Agile/XP. &lt;a href=&quot;https://github.com/WanNJ/audience1st&quot;&gt;Audience1st&lt;/a&gt; is an open source project designated to offer ticketing system to local theaters, in which case they will be able to have their own customer resources in stead of just a list of names provided by the third party ticketing system. Our professor, &lt;a href=&quot;http://www.armandofox.com/&quot;&gt;Armando Fox&lt;/a&gt;, is an excellent versatile EECS educator, who is also the creator of this repo for his love in play and music. He did this not for money but for his interests in this area, so he only charge the local theaters the money for maintaining the website.&lt;/p&gt;

&lt;p&gt;Although the look of the website is not perfect, sometimes you may think ugly, but this is for that we have no professional front programmer in hand. But we are considering to make some improvements later.&lt;/p&gt;

&lt;h1 id=&quot;migration-of-the-project&quot;&gt;Migration of the project&lt;/h1&gt;
&lt;p&gt;The first thing we need to do for developing this app is to migrate it to our own development environment.&lt;/p&gt;

&lt;h3 id=&quot;config&quot;&gt;Config&lt;/h3&gt;
&lt;p&gt;We can hardly imagine writing a useful app without using external APIs, which require tokens or passwords. &lt;strong&gt;Checking these passwords or secrets in to public repos is a very bad practice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://12factor.net&quot;&gt;12-Factor App&lt;/a&gt; methodology, it emphasizes the importance to keep configurations in the environment to implement &lt;strong&gt;independency&lt;/strong&gt;(&lt;strong&gt;strict separation of config from code&lt;/strong&gt;). This is because “Config varies substantially across deploys, code does not.” It says:&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;A litmus test for whether an app has all config correctly factored out of the code is whether the codebase &lt;strong&gt;could be made open source at any moment&lt;/strong&gt;, without compromising any credentials.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Good practice is to ignore these config files in version control. In audience1st, &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-.gitignore&quot; data-lang=&quot;.gitignore&quot;&gt;coverage/               # Test coverage log folder
config/database.yml     # Database configuration file
db/*.sqlite3	        # Local database file
config/application.yml  # Secrets storage
log/                    # Log folder for development environment
.*                      # All system files

# Others
.bundle/
TAGS
brakeman.*
rerun.txt
public/stylesheets/venue
tmp/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Ruby, we store the secrets in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.yml&lt;/code&gt; and we store database configurations in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt;. As you can see, these two files are ignored by &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;. Others are explained in the comments section.&lt;/p&gt;

&lt;p&gt;One typical &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.yml&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;session_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;stripe_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(publishable)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;stripe_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# include at most one of the following two lines - not both:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;email_integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MailChimp&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if you use MailChimp, include this line verbatim, else omit&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;email_integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConstantContact&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# if you use CC, include this line verbatime, else omit&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# if you included one of the two Email Integration choices:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;mailchimp_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;optional:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mailchimp,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;omit&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;entry&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;publishable&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;constant_contact_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One typical &lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqlite3&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db/test.sqlite3&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqlite3&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db/development.sqlite3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;setup-database&quot;&gt;Setup Database&lt;/h3&gt;
&lt;p&gt;Now we can directly run &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:setup&lt;/code&gt;, which runs &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;db:seed&lt;/code&gt; to create necessary seed data.&lt;/p&gt;

&lt;h3 id=&quot;to-be-continued&quot;&gt;To Be Continued…&lt;/h3&gt;</content><category term="Ruby on Rials" /><category term="Audience1st" /><category term="Notes" /><summary>Notes made when configure Audience1st...</summary></entry><entry><title>Agile/XP Tools</title><link href="/Agile-XP-Tools/" rel="alternate" type="text/html" title="Agile/XP Tools" /><published>2017-09-21T00:00:00-07:00</published><updated>2017-09-21T00:00:00-07:00</updated><id>/Agile:XP Tools</id><content type="html" xml:base="/Agile-XP-Tools/">&lt;h2 id=&quot;software-engineering&quot;&gt;Software Engineering&lt;/h2&gt;
&lt;p&gt;Software Engineering is a relatively new term which was first used as a title for the World’s first conference on software engineering, sponsored and facilitated by NATO in 1968. It was designated to solve the troublesome problems in building softwares. The concept is to apply engineering disciplines to software design and construction. It aims to make software product predictable in terms of cost, quality and time. Brooks mentioned “No silver bullet” in his article &lt;em&gt;The Mythical Man-Month&lt;/em&gt; in 1986, which is to say that there’s no specific solutions for the uncertainties, unconsistencies and complexities. But are there any ways to improve this process? Of course.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;The following contents &lt;strong&gt;draw heavily from Armando Fox’s slides&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;p--d&quot;&gt;P &amp;amp; D&lt;/h2&gt;
&lt;p&gt;Plan &amp;amp; Document is one of the methods in the early stage of SE. It emphasizes the importance of plan and document in advance. Here are some key points:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make plan before doing any coding.&lt;/li&gt;
  &lt;li&gt;Write detailed documents (e.g.: requirement documents and interface documents) of all phases of the plan you made.&lt;/li&gt;
  &lt;li&gt;Members should strictly follow the documents decided in earlier phases.&lt;/li&gt;
  &lt;li&gt;Any changes in plan or design should be reflected in documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;waterfall-model-1970&quot;&gt;Waterfall Model, 1970&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Requirements Analysis and Specification&lt;/li&gt;
  &lt;li&gt;Architecture design.&lt;/li&gt;
  &lt;li&gt;Implementation and Integration&lt;/li&gt;
  &lt;li&gt;Verification.&lt;/li&gt;
  &lt;li&gt;Maintenance.
It believes that “Earlier catch bug, cheaper it is”. But it requires extensive documentations, which may be too heavy and even too “clumsy” sometimes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;spiral-model-1986&quot;&gt;Spiral Model, 1986&lt;/h3&gt;
&lt;p&gt;As far as I am concerned, spiral model is the former prototype of Agile. It emphasizes the whole process of building a healthy software consists of mutiple iterations, in which every iteration contains almost every phase that waterfall model requires. Here is the illustration:&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/SpiralModel.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/SpiralModel.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;- Spiral Model&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;rational-unified-process-2003&quot;&gt;Rational Unified Process, 2003&lt;/h3&gt;
&lt;p&gt;It is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Rational&lt;/code&gt; for it is first developed by a compang called Rational Software.&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/RUP.jpg&quot;&gt;&lt;img src=&quot;/assets/img/projects/RUP.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;- RUP&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;The RUP framework is two dimensional, with axes indicating time and content. The time dimension is organized by phases, iterations, and milestones. The content dimension consists of software disciplines containing the workflows, &lt;strong&gt;roles&lt;/strong&gt;, &lt;strong&gt;activities&lt;/strong&gt;, and &lt;strong&gt;artifacts&lt;/strong&gt; as they apply to that discipline.
-IBM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;agile-manifesto-2001&quot;&gt;Agile Manifesto, 2001&lt;/h2&gt;
&lt;p&gt;“We are uncovering better ways of developing SW by doing it and helping others do it. Through this work we have come to value:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Individuals and interactions over processes &amp;amp; tools&lt;/li&gt;
  &lt;li&gt;Working software over comprehensive documentation&lt;/li&gt;
  &lt;li&gt;Customer collaboration over contract negotiation&lt;/li&gt;
  &lt;li&gt;Responding to change over following a plan
That is, while there is value in the items on the right, we value the items on the left more.”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extreme-programming-1999---2003&quot;&gt;Extreme Programming, 1999 - 2003&lt;/h2&gt;
&lt;p&gt;If one thing is good, then do it whenever you can and make best use of it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If short iterations are good, make them as short as possible (weeks vs. years)&lt;/li&gt;
  &lt;li&gt;If simplicity is good, always do the simplest thing that could possibly work&lt;/li&gt;
  &lt;li&gt;If testing is good, test all the time. Write the test code before you write the code to test.&lt;/li&gt;
  &lt;li&gt;If code reviews are good, review code continuously, by programming in pairs, taking turns looking over each others’ shoulders.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/ExtremeProgramming.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/ExtremeProgramming.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;- Agile Process&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;tools-for-agilexp-in-ruby-on-rails&quot;&gt;Tools for Agile/XP in Ruby on Rails&lt;/h3&gt;</content><category term="Ruby on Rials" /><category term="Agile" /><category term="SE" /><summary>A Introduction to Agile program Tools</summary></entry><entry><title>Java 8 Lambda Expression</title><link href="/Java8Learning/" rel="alternate" type="text/html" title="Java 8 Lambda Expression" /><published>2017-03-09T00:00:00-08:00</published><updated>2017-03-09T00:00:00-08:00</updated><id>/Java8Learning</id><content type="html" xml:base="/Java8Learning/">&lt;p&gt;最近又在写大作业，感觉自己根本不会Java，于是赶紧恶补Java 8，以免被组长还有各路大神嫌弃。&lt;/p&gt;

&lt;h3 id=&quot;lambda-expression&quot;&gt;Lambda Expression&lt;/h3&gt;
&lt;p class=&quot;notice&quot;&gt;A function (or a subroutine) defined, and possibly called, without being bound to an identifier.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;简单点说就是：一个不用被绑定到一个标识符上，并且可能被调用的函数。也可以理解为是一种快速创建SAM(SingleAbstract Method)接口(即只有一个方法的接口，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;EventListener&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.function&lt;/code&gt;等)的方法。&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;我的理解是Lambda表达式不是一个方法，它表达的是一个函数，所以最大的用途也就是简化那些需要函数作为参数的语句(函数接口) 这也就是为什么&lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda Expression&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.function&lt;/code&gt;结合这么紧的原因&lt;/p&gt;

&lt;p&gt;下面是基本格式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statment1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statment2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//.............&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statmentM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;参数类型可省略 —— 绝大多数情况，编译器都可以从上下文环境中推断出lambda表达式的参数类型&lt;/li&gt;
  &lt;li&gt;当lambda表达式的参数个数只有一个，可以省略小括号&lt;/li&gt;
  &lt;li&gt;当lambda表达式只包含一条语句时，可以省略大括号、return和语句结尾处的分号&lt;/li&gt;
  &lt;li&gt;使用Method Reference&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下是各种例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//添加监听器&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;//等价如下 &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//创建新线程&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//等价如下&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  
&lt;span class=&quot;c1&quot;&gt;//又如此，将字符串按长度排序&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;peng&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zhao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section&quot;&gt;再次理解&lt;/h2&gt;

&lt;p&gt;需要注意的是，函数式接口的名称并不是lambda表达式的一部分。那么问题来了，对于给定的lambda表达式，它的类型是什么？答案是：它的类型是由其上下文推导而来。例如，下面代码中的lambda表达式类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionListener&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;ActionListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dazzle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这就意味着同样的lambda表达式在不同上下文里可以拥有不同的类型：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;第一个lambda表达式&lt;code class=&quot;highlighter-rouge&quot;&gt;() -&amp;gt; &quot;done&quot;&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Callable的&lt;/code&gt;实例，而第二个lambda表达式则是&lt;code class=&quot;highlighter-rouge&quot;&gt;PrivilegedAction&lt;/code&gt;的实例。&lt;/p&gt;

&lt;p&gt;编译器负责推导lambda表达式的类型。它利用lambda表达式所在上下文所期待的类型进行推导，这个被期待的类型被称为目标类型。lambda表达式只能出现在目标类型为函数式接口的上下文中。&lt;/p&gt;

&lt;p&gt;当然，lambda表达式对目标类型也是有要求的。编译器会检查lambda表达式的类型和目标类型的方法签名（method signature）是否一致。当且仅当下面所有条件均满足时，lambda表达式才可以被赋给目标类型T：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;是一个函数式接口&lt;/li&gt;
  &lt;li&gt;lambda表达式的参数和T的方法参数在数量和类型上一一对应&lt;/li&gt;
  &lt;li&gt;lambda表达式的返回值和T的方法返回值相兼容（&lt;code class=&quot;highlighter-rouge&quot;&gt;Compatible&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;lambda表达式内所抛出的异常和T的方法throws类型相兼容&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于目标类型（函数式接口）已经“知道”lambda表达式的形式参数（Formal parameter）类型，所以我们没有必要把已知类型再重复一遍。也就是说，lambda表达式的参数类型可以从目标类型中得出：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在上面的例子里，编译器可以推导出s1和s2的类型是String。此外，当lambda的参数只有一个而且它的类型可以被推导得知时，该参数列表外面的括号可以被省略：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addActionListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dazzle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这些改进进一步展示了我们的设计目标：“不要把高度问题转化成宽度问题。”我们希望语法元素能够尽可能的少，以便代码的读者能够直达lambda表达式的核心部分。&lt;/p&gt;

&lt;p&gt;lambda表达式并不是第一个拥有上下文相关类型的Java表达式：泛型方法调用和“菱形”构造器调用也通过目标类型来进行类型推导：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><category term="coding" /><category term="Java" /><summary>Java 8 Learning Notes</summary></entry><entry><title>Java 8 Function</title><link href="/Java8-Function/" rel="alternate" type="text/html" title="Java 8 Function" /><published>2017-03-08T00:00:00-08:00</published><updated>2017-03-08T00:00:00-08:00</updated><id>/Java8 Function</id><content type="html" xml:base="/Java8-Function/">&lt;h3 id=&quot;javautilfunction&quot;&gt;java.util.function&lt;/h3&gt;

&lt;p&gt;在Java8中你会发现&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.function&lt;/code&gt;包下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Predicate&lt;/code&gt;和其他函数式接口广泛用在支持lambda表达式的API中。这些接口有一个抽象方法，会被lambda表达式的定义所覆盖。&lt;/p&gt;

&lt;p&gt;这里简单介绍一下&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;接口：&lt;/p&gt;

&lt;p&gt;接口的主要方法：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R apply(T t)&lt;/code&gt;
将Function对象应用到输入的参数上，然后返回计算结果。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default ‹V› Function‹T,V›&lt;/code&gt; 
将两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;整合，并返回一个能够执行两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;对象功能的&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;对象。&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;如果你想把接受一些输入参数并将对输入参数处理过后的结果返回的功能封装到一个方法内，&lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;接口是一个不错的选择。&lt;/p&gt;

&lt;p&gt;示例如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunctionDemo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//API which accepts an implementation of Function interface&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Function接口实现作为参数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueToBeOperated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueToBeOperated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Do some operations using the new value.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下面是调用上述方法的例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifyTheValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;somestring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><category term="coding" /><category term="Java" /><summary>Java 8 Learning Notes</summary></entry><entry><title>The use of .gitignore</title><link href="/gitignore%E7%94%A8%E6%B3%95/" rel="alternate" type="text/html" title="The use of .gitignore" /><published>2016-10-28T00:00:00-07:00</published><updated>2016-10-28T00:00:00-07:00</updated><id>/gitignore用法</id><content type="html" xml:base="/gitignore%E7%94%A8%E6%B3%95/">&lt;h1 id=&quot;section&quot;&gt;大作业的痛苦&lt;/h1&gt;
&lt;p&gt;最近在写大作业，用Github做版本控制，小组里就我一个人用的Mac，而且系统老是自动生成&lt;code class=&quot;highlighter-rouge&quot;&gt;.DS_Store&lt;/code&gt;文件，在网上查了怎么取消掉的命令行，输入&lt;b&gt;Terminal&lt;/b&gt;，无果。更痛苦的是，每次一修改源代码，就会有一堆&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;文件的changes，随之而来的，还有一堆conflicts，简直迷醉啊有木有。于是乎，我找到了&lt;b&gt;Solution&lt;/b&gt;。&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件) 建立方法&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;touch .gitignore
vim .gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个文件忽略的规则：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;*.a       # 忽略所有 .a 结尾的文件
!lib.a    # 但 lib.a 除外
/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/    # 忽略 build/ 目录下的所有文件&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;p&gt;但是我添加后，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git rm -r --cached .
git add .
git commit -m 'update .gitignore'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;之后，就再也不用忍受一堆.class文件啦！&lt;/p&gt;</content><category term="coding" /><summary>用.gitignore忽略文件</summary></entry><entry><title>Hello Blog</title><link href="/HelloBlog/" rel="alternate" type="text/html" title="Hello Blog" /><published>2016-10-02T00:00:00-07:00</published><updated>2016-10-02T00:00:00-07:00</updated><id>/HelloBlog</id><content type="html" xml:base="/HelloBlog/">&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/1.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Thanks to this girl - FYQ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;section&quot;&gt;初衷&lt;/h1&gt;
&lt;p&gt;一开始想有个自己的博客，（准确来说不是自己，而是我们俩，哈哈哈哈）是在今年暑假（就是因为上面这个人），结果感觉做个动态网站要学的东西太多，所以就先搁置。&lt;/p&gt;

&lt;p&gt;开心的是，开学小百合的灿海学长给介绍了Jekyll，然后我回去捣鼓了一天，终于把Ruby什么的一堆环境配置好了。就开始改写代码，加自己的功能，然后又过了几天，搞出来了只属于我和上面这个人的网站，然后绑定CNAME(之前早就买好了域名，10年的)，放到GitHub Pages上托管，&lt;b&gt;Everything is done.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;所以这是我搞的第二个了，就是想给自己写点东西的动力，给点自己记录生活的激情。别每天看着身边的人一个个的都在成长，都好厉害的样子就盲目去追逐。就像长跑一样，如果你跑步时总想着追着前面那个人，那你自己的节奏就会乱，到了后程就会感觉力不从心。但行好事，莫问前程。河狭水急，人急计生。做自己想做之事，这总不是错的。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;行动&lt;/h1&gt;
&lt;p&gt;如果你们也想自己做一个，其实也挺简单，不过没有&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;官网上说的那么简单，原话是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Get up and running &lt;i&gt;in seconds&lt;/i&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面简单介绍一下这几秒钟内要做的事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置Jekyll Environment，安装Ruby，什么一大堆，如果是Mac，装个Homebrew（简直神器），一个个安吧，详情见Jekyll官网，祝好运。&lt;/li&gt;
  &lt;li&gt;去Github上找自己喜欢的主题，找的时候一定要注意跨设备性，如果这玩意要自己写的话就很麻烦，不如让别人帮你写好，然后Fork到自己的Github上，到现在为止没用过Github的同学就…&lt;/li&gt;
  &lt;li&gt;简单配置网站的话，直接修改Fork下来的文件夹中的&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;再把 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 文件夹中的样本删掉，用Markdown写出你自己的.&lt;/li&gt;
  &lt;li&gt;再改改这的代码，改改那的代码，加特技，最后如果想把这个网站弄的彻底的面目全非，请再在主页加上你自己的自拍。&lt;/li&gt;
  &lt;li&gt;在Github上把这个文件夹拷贝到&lt;code class=&quot;highlighter-rouge&quot;&gt;YourUserName.github.io&lt;/code&gt;里，YourUserName就是Your User Name了，一定要完全一样，不然会失败。&lt;/li&gt;
  &lt;li&gt;(optional)在GitHub的Settings里绑定自己的域名，如果你不想每次看自己的网站都要输入&lt;i&gt;Balabalabala.github.io&lt;/i&gt;这么一长串的话。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all. 完全不懂编程的同学可能比较难以完成，或者完成了之后完全没办法修改，只能照搬。这个时候，只需要你完成下面的四个步骤&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学！&lt;/li&gt;
  &lt;li&gt;习！&lt;/li&gt;
  &lt;li&gt;编！&lt;/li&gt;
  &lt;li&gt;程！&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-2&quot;&gt;成果&lt;/h1&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/projects/2.png&quot;&gt;&lt;img src=&quot;/assets/img/projects/2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Screenshots of My Page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-3&quot;&gt;尾声&lt;/h1&gt;
&lt;p&gt;最后如果有人做了，或者已经有了，可以通过各种途径告诉我，以后可以多多交流，刚好我也想加个&lt;code class=&quot;highlighter-rouge&quot;&gt;FRIENDS&lt;/code&gt;模块，里面列出友情链接，哈哈哈。&lt;/p&gt;</content><category term="blog" /><category term="about" /><category term="life" /><summary>Hello, My coming 2017. Hello, My life.</summary></entry><entry><title>Hello World</title><link href="/HelloWorld/" rel="alternate" type="text/html" title="Hello World" /><published>2016-10-02T00:00:00-07:00</published><updated>2016-10-02T00:00:00-07:00</updated><id>/HelloWorld</id><content type="html" xml:base="/HelloWorld/">&lt;h1 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h1&gt;

&lt;p&gt;网站基本配置完成，还有要搞的就是跨设备支持（那个返回顶端的小箭头在移动设备上显示不出来）和Disqus，话说iPhone的屏是真长啊。&lt;/p&gt;

&lt;p&gt;原本想加个背景音乐，但在上个网站的配置过程中发现，只有Chrome支持自动播放，索性就不加了。&lt;/p&gt;

&lt;p&gt;关于更多这个玩意是怎么弄出来的，请移步Projects.&lt;/p&gt;

&lt;p&gt;把以前的文章拉出来凑数，以后&lt;b&gt;不定期&lt;/b&gt;应该会更新…&lt;/p&gt;

&lt;p&gt;就这样吧，最后放个图&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/posts/4_0.JPG&quot;&gt;&lt;img src=&quot;/assets/img/posts/4_0.JPG&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Eh...&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="life" /><summary>就这样吧</summary></entry><entry><title>没有色彩</title><link href="/%E6%B2%A1%E6%9C%89%E8%89%B2%E5%BD%A9/" rel="alternate" type="text/html" title="没有色彩" /><published>2016-08-12T00:00:00-07:00</published><updated>2016-08-12T00:00:00-07:00</updated><id>/没有色彩</id><content type="html" xml:base="/%E6%B2%A1%E6%9C%89%E8%89%B2%E5%BD%A9/">&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/posts/3_0.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/3_0.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;“听着，作，有一件事你得记住了。你不是缺乏色彩。那种东西仅仅是姓名而已。我们的确拿这件事开过你的玩笑，可全都没有意义。其实，多崎作，你是个无比优秀、色彩丰富的人，一直在建造美妙的火车站。如今你是个三十六岁的健康市民，拥有选举权，定期纳税，为了看我甚至还一个人坐飞机到芬兰来。你什么都不欠缺。你要有自信，要有勇气。你需要的就是这两样。千万别因为怯懦和无聊的自尊心失去心爱的人。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;方才躺在榻榻米上久久地望向窗外。马总说过，“你们头顶的天要变了”。可刚才我发现它无时无刻不在变。其实我一直都有个疑问，那就是地球自转的时候，裹在其表面的大气，到底跟不跟着动。如果我们看到的云在动，大部分是由于我们自己在动，而我们却浑然未觉，那可真是件令人悲哀的事。&lt;/p&gt;

&lt;p&gt;读村上读多了会发现，村上主要写的，是孤独，是一个人被关在小黑屋中的思想见闻，如《挪威的森林》、《国境以南太阳以西》等。男主都是与世无争的类型，少言寡语，彬彬有礼，对身边的事反应迟钝又极其敏感，喜欢一个人漫无目的地在街上闲逛，喜欢安静地思考胜过与他人交谈。一言以蔽之，愚以为，村上写的都是现代意义上的咸鱼。不论其家境如何，如《挪》中渡边的普通家庭，《没有色彩…》中作的三年换一辆奔驰的富裕家庭，其本质都一样——甘心做一条咸鱼又能时常自得其乐的伪咸鱼。可能有些玄乎，但个人印象就是这样。&lt;/p&gt;

&lt;p&gt;看看自己，其实也与咸鱼无异，不过，做一只会思考的咸鱼，也未尝不潇洒。甚至，可以说是快意之事。&lt;/p&gt;

&lt;p&gt;咸鱼最喜欢做的，就是感时伤怀，消磨时间。比如说，《没有色彩》中的多崎作，他最爱做的事竟然是眺望火车站，不知是什么原因，从懂事起到现在，他始终如一地沉迷于火车站。“有关火车站的一切事物，都强烈地迷惑着他的心。”原文如是说。&lt;/p&gt;

&lt;p&gt;所以，一旦无事可做而又不想回家的时候，他便会跑到火车站去看人来人往，望云卷云舒，观众生百态，尝人情冷暖，怡然自得，虽然大部分时间他都在发呆、沉浸在自己的那点小情绪中，我还是很佩服他。&lt;/p&gt;

&lt;p&gt;为什么佩服他？因为我特么也想过，如果自己没什么事干，又不想回家时，会干嘛！苦苦思索，抓耳挠腮，面红耳赤之后，我还是不知道去干嘛！也许就特么的这样往路边一坐，然后开始自己45度角的人生。或是找一家酒吧进去点一杯凉白开，然后无视送水小哥的白眼，开始听驻唱哼哼唧唧，有时候，人们喜欢管这叫“靡靡之音”，而我们，管这个叫民谣。&lt;/p&gt;

&lt;p&gt;时常会感叹，生活奇妙啊，真特么的奇妙啊。生活无奈啊，真特么的无奈啊。然后身后老爸老妈异口同声：“小屁孩懂个什么生活，洗洗早点滚去睡觉。”“……”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“真是不可思议啊。”惠理说。&lt;br /&gt;
“什么？”&lt;br /&gt;
“那个美好的时代悄然逝去，而且一去不复返。各种美丽的&lt;b&gt;可能性&lt;/b&gt;竟被流逝的光阴吞没，消失地无影无踪。就是这个。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们这个年纪啊，真的充满了各种可能性啊。而不知为什么，恰如其分的话总是姗姗来迟，错过最恰当的时机。而这些错过，同样能把人迷得神魂颠倒。&lt;/p&gt;

&lt;p&gt;听着赵雷的少年锦时，顿感文风突变。音乐无疑可以很大程度上改变人的心境，无奈没有一口好嗓。寒酸歌声，请多包涵。&lt;/p&gt;

&lt;p&gt;突然想起去杭州玩时找长桥的过程，问两个面相和蔼的警察叔叔，“哥，你知不知道长桥在哪里啊？”“知道。”“…”“哦，你说双投桥啊，往前走，在大马路上呢。”“啊，谢谢，谢谢，好难找啊。”“哈哈哈哈，马路上那桥就是。”然后屁颠屁颠跑到马路上，相拥而跳，然后找了半天长桥这俩字，愣是没找着。面面相觑，大眼瞪小眼，“我们不会被忽悠了吧？”“不会吧，他们俩还在那站着呢。”“那搜一搜长桥长什么样子？”“…….”“卧槽，这不就是我们来的路上的那个桥吗！”“妈的智障，给忽悠了。”“……”&lt;/p&gt;

&lt;p&gt;刚才帮妈妈拿了个快递，走在地下停车场，望向出口那里的阳光，穿着邋遢的拖鞋，随意套上的初中就买的绿色衣服，一点也不青春。然后过了一会儿，妈妈又来了一个快递，我穿着同样邋遢的拖鞋，套上同样的初中就买的绿色衣服，走在同样的地下停车场，望向同样的出口，竟无法抑制地破声而笑，我也不知道为什么，可能是耳机里放着“沾满口水的枕头”吧，哈哈哈。&lt;/p&gt;

&lt;p&gt;“人生就像复杂的乐谱，作想。写满十六分音符和三十二分音符，以及许多奇妙的符号、意义不明的批注。很难正确地解读。即便解读出来，将它转换成正确的乐音，也未必能正确理解和评价其中寄托的意义。它也未必能让人幸福。人类的行为为什么非得如此错综复杂呢？”&lt;/p&gt;

&lt;p&gt;的确，我们会忍不住去想一些东西，但是，想了也不一定有结果，有结果了也没办法证实。那么这类的思考在我看来就是徒增烦恼，庸人自扰。&lt;/p&gt;

&lt;p&gt;这个时候，我往往会想起当重新来到那个曾经错过的长桥时，我们笑的样子。&lt;/p&gt;

&lt;p&gt;而我总会莫名其妙地停止脑中的一切，放下手中的一切，插上心中的竹蜻蜓，来到夕影亭下，笑成一个傻逼。&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/posts/3_1.JPG&quot;&gt;&lt;img src=&quot;/assets/img/posts/3_1.JPG&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="book" /><summary>而我总会莫名其妙地停止脑中的一切，放下手中的一切，插上心中的竹蜻蜓，来到夕影亭下，笑成一个傻逼。</summary></entry><entry><title>自说自的话</title><link href="/%E8%87%AA%E8%AF%B4%E8%87%AA%E7%9A%84%E8%AF%9D/" rel="alternate" type="text/html" title="自说自的话" /><published>2016-02-10T00:00:00-08:00</published><updated>2016-02-10T00:00:00-08:00</updated><id>/自说自的话</id><content type="html" xml:base="/%E8%87%AA%E8%AF%B4%E8%87%AA%E7%9A%84%E8%AF%9D/">&lt;h2 id=&quot;section&quot;&gt;&lt;em&gt;这不是影评！不是影评！&lt;/em&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;无敌是多么 多么寂寞&lt;br /&gt;
无敌是多么 多么空虚&lt;br /&gt;
独自在顶峰中 冷风不断的吹过&lt;br /&gt;
我的寂寞 谁能明白我&lt;br /&gt;
无敌是多么 多么寂寞&lt;br /&gt;
无敌是多么 多么空虚&lt;br /&gt;
躲在天边的她 可不可听我诉说&lt;br /&gt;
我的寂寞 无尽的寂寞&lt;br /&gt;
（周星弛词曲 邓超演唱）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;如果硬是要我从这无厘头的感慨中，提炼出一个中心思想，一个10分的阅读理解，我的能力大概只能做4分。因为阅读理解本身就是因人而异，可某些人硬是要来个标准答案，让人挖空心思去想他人是怎么想的。所以我们老实人的阅读理解不很厉害，因为做多了难免互相猜忌，伤感情嘛！&lt;/p&gt;

&lt;p&gt;言归正传，我是来写观影记录的。&lt;/p&gt;

&lt;p&gt;看完，语文功底不那么深厚的我，就只是不断感慨，星爷牛逼啊，牛逼啊！这剧情，这主题表达，这主题曲！好像瞬间涌入我脑海中的词就只有牛逼…我不会告诉你我还学过成像才华横溢、卓尔不群、出类拔萃这样的四个字的词儿！我姑且认为人到激动时，语言能力便急剧下降，所以这不是我的错…&lt;/p&gt;

&lt;p&gt;环保主题，那个女的一开始介绍声纳时，我就感觉不对劲，怎么派个日本人过来，然后提到了海豚。瞬间明白了什么。《海豚湾》是纪录片，现实主义。而此作周星驰用自己的方式再次谴责了日本这种不负责任又极度短视的行为，可谓业界良心。全片，我一字以蔽之——黑！的！漂！亮！&lt;/p&gt;

&lt;p&gt;对星爷的佩服、尊敬也不重复说了，我不会说我早上看了第N遍功夫。&lt;/p&gt;

&lt;p&gt;然后让我们先抛开剧情设置、人物表演不管，单看主题表达。抛开副主题——金钱与爱情不管，单看环保主题，我认为《美人鱼》是成功的，是能打动人心的。当然不是说剧情不好，表演差劲，而是我个人太矫情，死抓着主题不放。乱炮轰死，乱枪射死，乱刀砍死，乱棍打死，那几分钟的杀戮，的确露骨，淋漓尽致地表达了人性中恶的那一面，让人不忍直视却又逼你思考。还是无法抑制地想起了《海豚湾》中的场景，出现在电影中刘轩查资料的视频中的片段即出于此，触目惊心。&lt;/p&gt;

&lt;p&gt;刚才说“先”抛开，然后我想说的就这些，然后就没有然后了…&lt;/p&gt;

&lt;p&gt;想黑日本，可本着一个理性网民的良知，还是等知识水平提高了以后再发表言论吧。&lt;/p&gt;

&lt;p&gt;如果世界上连一滴干净的水,一口新鲜的空气都没有,挣再多的钱,都是死路一条。&lt;/p&gt;

&lt;p&gt;号召呼吁的什么就不说了，冷暖自知。最后安利一波海豚湾，“违法”拍摄，真实性无可置疑，动机你可以去怀疑，反正我是懒得怀疑。&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
    
    &lt;a href=&quot;/assets/img/posts/2_0.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2_0.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;a href=&quot;/assets/img/posts/2_1.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2_1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;a href=&quot;/assets/img/posts/2_2.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2_2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;整蛊专家&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="life" /><category term="movie" /><category term="comments" /><summary>无敌是多么 多么寂寞</summary></entry><entry><title>越了个狱</title><link href="/%E8%B6%8A%E4%BA%86%E4%B8%AA%E7%8B%B1/" rel="alternate" type="text/html" title="越了个狱" /><published>2016-01-25T00:00:00-08:00</published><updated>2016-01-25T00:00:00-08:00</updated><id>/越了个狱</id><content type="html" xml:base="/%E8%B6%8A%E4%BA%86%E4%B8%AA%E7%8B%B1/">&lt;figure&gt;
    
    &lt;a href=&quot;/assets/img/posts/1_0.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/1_0.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;T-bag&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;从初中就开始看《越狱》，那时候还在凤凰卫视连载。六年之后，终于把四季看完，结局不出所料，过程让人难忘。最后在Spiritualized略显沙哑的歌声中，Lay it down slow 的旋律缓缓升起，人各有梦，浮光掠影般的几个镜头竟湿润了眼眶。T-bag看到了那本书上的GATE，不知勾起了多少痛苦的回忆。科尔.普发，在他踩上那个名片的一刻就再也不存在了，那一刻我仿佛看到了刚刚被唤醒的善的灵魂又溘然逝去。他掏出裤兜，在草地上抬头仰望天空，镜头拉远，监狱在屏幕中越来越小，未来会怎样？Lay it down easy.&lt;/p&gt;

&lt;p&gt;如果邪恶 是华丽残酷的乐章，那么正义 是深沉无奈的惆怅。我们可以遗忘原谅，但必须知道真相。《Prison Break》里Machel的行为诠释了个人对社会的力量，正所谓，每一朵雪花在雪崩发生时都有责任。如此黑暗的社会背景，成就了一群人的传奇。&lt;/p&gt;

&lt;p&gt;家庭、爱情、友谊、自由、金钱、权利，这几个永恒的话题在这部剧中得到了多层次的演绎，欺骗与被欺骗，背叛与被背叛，好像学到了很多，却不知从何谈起，只好对一把琴、一壶酒、一溪云，相视无言。Just be a man.That’s it.&lt;/p&gt;

&lt;p&gt;有些事情的真相真的就是那么冰冷，我们只有选择相信。为什么不相信呢，就让夜空中最亮的那颗，指引你前进吧。偶尔，你揩揩鼻头的泡泡，仰头问，能否 给一只肩膀。我会轻轻笑下，能啊。C’est la vie .&lt;/p&gt;</content><category term="life" /><category term="movie" /><category term="comments" /><summary>Just be a man.That’s it.</summary></entry></feed>
